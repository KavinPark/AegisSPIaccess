
// AegisSPIDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "AegisSPI.h"
#include "AegisSPIDlg.h"
#include "afxdialogex.h"

#include "libMPSSE_spi.h"
#include "ftd2xx.h"
#include "Utils.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
	enum { IDD = IDD_ABOUTBOX };

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(CAboutDlg::IDD)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CAegisSPIDlg 대화 상자




CAegisSPIDlg::CAegisSPIDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(CAegisSPIDlg::IDD, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);

	m_sAddr = _T("0x00000000");
	m_sData = _T("0x00000000");
}

void CAegisSPIDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);

	DDX_Text(pDX, IDC_EDIT_ADDR, m_sAddr);
	DDX_Text(pDX, IDC_EDIT_DATA, m_sData);
}

BEGIN_MESSAGE_MAP(CAegisSPIDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_EN_CHANGE(IDC_EDIT_DATA, &CAegisSPIDlg::OnEnChangeEditData)
	ON_EN_CHANGE(IDC_EDIT_ADDR, &CAegisSPIDlg::OnEnChangeEditAddr)
	ON_BN_CLICKED(IDC_BUTTON_WORD_WRITE, &CAegisSPIDlg::OnBnClickedButtonWordWrite)
	ON_BN_CLICKED(IDC_BUTTON_CONNECT, &CAegisSPIDlg::OnBnClickedButtonConnect)
	ON_BN_CLICKED(IDC_BUTTON_WORD_READ, &CAegisSPIDlg::OnBnClickedButtonWordRead)
	ON_BN_CLICKED(IDC_BUTTON_LOOP, &CAegisSPIDlg::OnBnClickedButtonLoop)
	ON_BN_CLICKED(IDC_BUTTON_LOOPBURST, &CAegisSPIDlg::OnBnClickedButtonLoopburst)
END_MESSAGE_MAP()


// CAegisSPIDlg 메시지 처리기

BOOL CAegisSPIDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다. 응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CAegisSPIDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다. 문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CAegisSPIDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CAegisSPIDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}



void CAegisSPIDlg::OnEnChangeEditData()
{
	UpdateData(TRUE);
}


void CAegisSPIDlg::OnEnChangeEditAddr()
{
	UpdateData(TRUE);
}


void CAegisSPIDlg::OnBnClickedButtonConnect()
{
	mobjCommSPI.Open();
}

void CAegisSPIDlg::OnBnClickedButtonWordWrite()
{
	uint8 tx_buffer[8];

	// EDIT value 
	Utils::Convert_Str2Hex(m_sAddr, &tx_buffer[0]);
	Utils::Convert_Str2Hex(m_sData, &tx_buffer[4]);
	tx_buffer[0] |= 0x80;	// Write Cmd

	// SPI Send
	mobjCommSPI.WriteData(tx_buffer, 8);
}



void CAegisSPIDlg::OnBnClickedButtonWordRead()
{
	uint8 tx_buffer[8] = {0, };
	uint8 rx_buffer[8] = {0, };

	// EDIT value : tx_buffer[4..7] = 0
	Utils::Convert_Str2Hex(m_sAddr, &tx_buffer[0]);
	tx_buffer[0] &= ~(0x80);	// Read Cmd

	// SPI Write/Read
	mobjCommSPI.WriteReadData(tx_buffer, rx_buffer, 8);
		// rx_buffer[4..7] valid
	uint32 nData = rx_buffer[4]<<24 | rx_buffer[5]<<16 | rx_buffer[6]<<8 | rx_buffer[7]<<0;

	// Display EDIT window
	CString sData = Utils::Convert_Hex2Str(nData);
	((CEdit *)GetDlgItem(IDC_EDIT_DATA))->SetWindowText(sData);
}



void CAegisSPIDlg::OnBnClickedButtonLoop()
{
	uint8 tx_buffer[8] = {0, };
	uint8 rx_buffer[8] = {0, };

	// EDIT value 
	Utils::Convert_Str2Hex(m_sAddr, &tx_buffer[0]);
	Utils::Convert_Str2Hex(m_sAddr, &tx_buffer[4]);

	// SPI Write/Read
	mobjCommSPI.WriteReadData(tx_buffer, rx_buffer, 8);
		// rx_buffer[4..7] valid
	uint32 nData = rx_buffer[4]<<24 | rx_buffer[5]<<16 | rx_buffer[6]<<8 | rx_buffer[7]<<0;

	// Display EDIT window
	CString sData = Utils::Convert_Hex2Str(nData);
	((CEdit *)GetDlgItem(IDC_EDIT_DATA))->SetWindowText(sData);	
}


void CAegisSPIDlg::OnBnClickedButtonLoopburst()
{
	uint8 tx_buffer[200] = {0, };
	uint8 rx_buffer[200] = {0, };

	// EDIT value 
	Utils::Convert_Str2Hex(m_sAddr, &tx_buffer[0]);

	for (uint32 i=0; i<((200-4)/4); i++)
	{
		tx_buffer[4+i*4] = tx_buffer[0];
		tx_buffer[5+i*4] = tx_buffer[1];
		tx_buffer[6+i*4] = tx_buffer[2];
		tx_buffer[7+i*4] = tx_buffer[3];
	}

	// SPI Write/Read
	mobjCommSPI.WriteReadData(tx_buffer, rx_buffer, 200);
		// rx_buffer[4..7] valid
	uint32 nData = rx_buffer[200-4]<<24 | rx_buffer[200-3]<<16 | rx_buffer[200-2]<<8 | rx_buffer[200-1]<<0;

	// Display EDIT window
	CString sData = Utils::Convert_Hex2Str(nData);
	((CEdit *)GetDlgItem(IDC_EDIT_DATA))->SetWindowText(sData);	
}
